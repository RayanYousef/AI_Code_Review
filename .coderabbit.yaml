knowledge_base:
  learnings:
    enabled: true
    opt_out: false

review_instructions: |
  PRIMARY STANDARD: Enforce all rules from CodingGuidelines.md strictly.
  
  FOR EVERY VIOLATION IDENTIFIED:
  1. **PINPOINT THE FLAW** - Cite the exact line number(s) where the violation occurs
  2. **EXPLAIN THE ISSUE** - Describe why it violates the guideline and the impact
  3. **PROVIDE SOLUTION** - Give a corrected code example with the fix applied
  4. **REFERENCE THE RULE** - Quote the specific section from CodingGuidelines.md
  
  ENFORCED PRINCIPLES:
  - SOLID, KISS, DRY, CQS principles (provide specific violations with line references)
  - Type declaration: Flag ALL 'var' usage - cite exact line, explain type needed, show fix
  - Single responsibility: If function does 2+ things, list each responsibility at the line it occurs
  - Unity-specific: Check serialization ([SerializeField]), component caching, LINQ in hot paths, GetComponent usage, NonAlloc APIs, public lifecycle methods, naming conventions
  
  OUTPUT FORMAT:
  - VIOLATION: [Category Name]
  - LINE(S): [Specific line numbers]
  - ISSUE: [Detailed explanation]
  - SOLUTION: [Code example showing the fix]
  - GUIDELINE REFERENCE: [CodingGuidelines.md section]

reviews:
  path_filters:
    - "!**/settings.json"
    - "!**/*.meta"
  
  path_instructions:
    - path: "**/*.cs"
      instructions: |
        MANDATORY REVIEW CHECKLIST FOR C# FILES:
        
        1. **TYPE DECLARATION ANALYSIS:**
           - Search for all 'var' declarations
           - For each 'var' found: cite line number, specify required type, provide corrected line
        
        2. **SINGLE RESPONSIBILITY CHECK:**
           - Review each function/method body
           - If function has 2+ distinct responsibilities, list them with line ranges
           - Suggest function split with example implementation
        
        3. **UNITY-SPECIFIC VIOLATIONS:**
           - [SerializeField] on private editor fields: check line-by-line
           - Component caching: verify components are cached in Awake/Start (cite missing lines)
           - LINQ in Update/LateUpdate/FixedUpdate: flag usage and provide NonAlloc alternative
           - GetComponent in Update loops: cite line, explain performance impact, suggest caching
           - Lifecycle method modifiers: flag any 'public' on Awake/Start/Update/OnEnable/OnDisable/OnDestroy
           - Naming conventions: check PascalCase for public/private, camelCase for local vars
        
        4. **SOLID PRINCIPLES:**
           - Single Responsibility: one reason to change per class
           - Open/Closed: check for hard-coded values that should be parameters
           - Liskov Substitution: verify override implementations maintain base contract
           - Interface Segregation: look for fat interfaces that should be split
           - Dependency Inversion: check for hard dependencies instead of abstractions
        
        5. **DRY VIOLATIONS:**
           - Identify duplicated code blocks (3+ similar lines)
           - Cite all occurrences with line numbers
           - Provide refactored solution using helper method or abstraction
        
        6. **CQS VIOLATIONS:**
           - Flag methods that both query state AND modify state
           - Cite line numbers where both occur
           - Suggest separation into separate methods
        
        OUTPUT FOR EACH VIOLATION:
        ═══════════════════════════════════════
        VIOLATION: [Type]
        LINE(S): [Specific line numbers]
        ISSUE: [Detailed description and impact]
        SOLUTION:
        ```csharp
        [Corrected code example]
        ```
        GUIDELINE REFERENCE: [CodingGuidelines.md section]
        ═══════════════════════════════════════